% author: Jie Liu
% contact: liu6@uw.edu
GRAPHICAL_MODEL hmm_factorialModel

#include "constants.inc"

frame: 0 {

variable : G {
type : discrete hidden cardinality G_CARD;
conditionalparents : nil using DenseCPT("pG");
  }
  
variable : Z {
type : discrete hidden cardinality Z_CARD; 
conditionalparents : nil using DenseCPT("pZ");
  }  
  
variable : P1_1 {
type : discrete observed P1_1_OBS:P1_1_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("pP1"); 
  }  
  
variable : P1_2 {
type : discrete observed P1_2_OBS:P1_2_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("pP1"); 
  }   
  
variable : P2_1 {
type : discrete observed P2_1_OBS:P2_1_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("pP2");  
  }  
  
variable : P2_2 {
type : discrete observed P2_2_OBS:P2_2_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("pP2"); 
  }  
  
variable : P3_1 {
type : discrete observed P3_1_OBS:P3_1_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("pP3"); 
  }  
  
variable : P3_2 {
type : discrete observed P3_2_OBS:P3_2_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("pP3"); 
  }        
     

variable : D {
type : discrete observed D_OBS:D_OBS cardinality D_CARD;
conditionalparents : nil using DenseCPT("internal:UnityScore"); 
  }  

variable : A1 {
type : continuous observed A1_OBS:A1_OBS;
switchingparents: Z(0),D(0) using mapping ("dt_Z_D");
conditionalparents : G(0),P1_2(0) using mixture collection("pA1_given_G_P_D0") mapping("dtA_given_G_P") 
                   | G(0),P1_1(0) using mixture collection("pA1_given_G_P_D0") mapping("dtA_given_G_P")
                   | nil using mixture ("mixtureA1_D0_0_noCNAs")
                   | nil using mixture ("mixtureA1_D0_0_noCNAs")
                   | nil using mixture ("mixtureA1_D0_0_noCNAs")
                   | G(0),P1_2(0) using mixture collection("pA1_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P1_1(0) using mixture collection("pA1_given_G_P_D1") mapping("dtA_given_G_P")
                   | nil using mixture ("internal:ZeroScore") 
                   | nil using mixture ("internal:ZeroScore") 
                   | nil using mixture ("internal:ZeroScore");
  }

variable : L1 {
type : continuous observed L1_OBS:L1_OBS;
switchingparents: Z(0) using mapping ("internal:copyParent");
conditionalparents : G(0),P1_2(0) using mixture collection("pL1_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P1_1(0) using mixture collection("pL1_given_G_P") mapping("dtL_given_G_P")
                   | nil using mixture ("mixtureL1_0_noCNAs") 
                   | nil using mixture ("mixtureL1_0_noCNAs") 
                   | nil using mixture ("mixtureL1_0_noCNAs");
  }
  
variable : A2 {
type : continuous observed A2_OBS:A2_OBS;
switchingparents: Z(0),D(0) using mapping ("dt_Z_D");
conditionalparents : G(0),P2_2(0) using mixture collection("pA2_given_G_P_D0") mapping("dtA_given_G_P") 
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D0") mapping("dtA_given_G_P")
                   | nil using mixture ("mixtureA2_D0_0_noCNAs")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P2_2(0) using mixture collection("pA2_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D1") mapping("dtA_given_G_P")
                   | nil using mixture ("internal:ZeroScore")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D1") mapping("dtA_given_G_P");
  }

variable : L2 {
type : continuous observed L2_OBS:L2_OBS;
switchingparents: Z(0) using mapping ("internal:copyParent");
conditionalparents : G(0),P2_2(0) using mixture collection("pL2_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pL2_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pL2_given_G_P") mapping("dtL_given_G_P")
                   | nil using mixture ("mixtureL2_0_noCNAs")
                   | G(0),P2_1(0) using mixture collection("pL2_given_G_P") mapping("dtL_given_G_P");
  }  
  
variable : A3 {
type : continuous observed A3_OBS:A3_OBS;
switchingparents: Z(0),D(0) using mapping ("dt_Z_D");
conditionalparents : G(0),P3_2(0) using mixture collection("pA3_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D0") mapping("dtA_given_G_P")
                   | nil using mixture ("mixtureA3_D0_0_noCNAs") 
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P3_2(0) using mixture collection("pA3_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D1") mapping("dtA_given_G_P")
                   | nil using mixture ("internal:ZeroScore") 
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D1") mapping("dtA_given_G_P");
  }

variable : L3 {
type : continuous observed L3_OBS:L3_OBS;
switchingparents: Z(0) using mapping ("internal:copyParent");
conditionalparents : G(0),P3_2(0) using mixture collection("pL3_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pL3_given_G_P") mapping("dtL_given_G_P")
                   | nil using mixture ("mixtureL3_0_noCNAs")
                   | G(0),P3_1(0) using mixture collection("pL3_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pL3_given_G_P") mapping("dtL_given_G_P");
  }    
 
}

frame: 1 {

variable : S {
type : discrete observed S_OBS:S_OBS cardinality S_CARD;
conditionalparents : nil using DenseCPT("internal:UnityScore");
  }

variable : G {
type : discrete hidden cardinality G_CARD;
switchingparents: S(0) using mapping ("internal:copyParent");
conditionalparents : nil using DenseCPT("pG")
		               | nil using DenseCPT("pG_uni");
  }

variable : LOG_DIST_G {
% when S(0) != 0 and we're on a diagonal transition, G(0)=G(-1), score distance using a Gaussian
type : continuous observed LOG_DIST_OBS:LOG_DIST_OBS;
switchingparents: S(0), G(-1), G(0) using mapping ("g_diagCheck");
weight:  scale 1 
	 | scale G_OD_OBS_0:G_OD_OBS_0
	 | scale G_OD_OBS_1:G_OD_OBS_1
	 | scale G_OD_OBS_2:G_OD_OBS_2
	 | scale G_OD_OBS_3:G_OD_OBS_3
	 | scale G_OD_OBS_4:G_OD_OBS_4
	 | scale G_OD_OBS_5:G_OD_OBS_5
	 | scale G_OD_OBS_6:G_OD_OBS_6
	 | scale G_OD_OBS_7:G_OD_OBS_7
	 | scale G_OD_OBS_8:G_OD_OBS_8
	 | scale G_OD_OBS_9:G_OD_OBS_9
	 | scale G_OD_OBS_10:G_OD_OBS_10
	 | scale G_OD_OBS_11:G_OD_OBS_11
	 | penalty G_D_COEFF_OBS_0:G_D_COEFF_OBS_0 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_1:G_D_COEFF_OBS_1 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_2:G_D_COEFF_OBS_2 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_3:G_D_COEFF_OBS_3 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_4:G_D_COEFF_OBS_4 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_5:G_D_COEFF_OBS_5 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_6:G_D_COEFF_OBS_6 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_7:G_D_COEFF_OBS_7 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_8:G_D_COEFF_OBS_8 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_9:G_D_COEFF_OBS_9 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_10:G_D_COEFF_OBS_10 shift G_TRANSITION_SHIFT
	 | penalty G_D_COEFF_OBS_11:G_D_COEFF_OBS_11 shift G_TRANSITION_SHIFT;
conditionalparents : nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("mixture_ggDiag0")
		   | nil using mixture("mixture_ggDiag1")
		   | nil using mixture("mixture_ggDiag2")
		   | nil using mixture("mixture_ggDiag3")
		   | nil using mixture("mixture_ggDiag4")
		   | nil using mixture("mixture_ggDiag5")
		   | nil using mixture("mixture_ggDiag6")
		   | nil using mixture("mixture_ggDiag7")
		   | nil using mixture("mixture_ggDiag8")
		   | nil using mixture("mixture_ggDiag9")
		   | nil using mixture("mixture_ggDiag10")
		   | nil using mixture("mixture_ggDiag11");
}
  
variable : Z {
type : discrete hidden cardinality Z_CARD;
switchingparents: S(0) using mapping ("internal:copyParent");
conditionalparents : nil using DenseCPT("pZ")
		               | nil using DenseCPT("pZ_uni");
  }  

variable : LOG_DIST_Z {
% when S(0) != 0 and we're on a diagonal transition, Z(0)=Z(-1), score distance using a Gaussian
type : continuous observed LOG_DIST_OBS:LOG_DIST_OBS;
switchingparents: S(0), Z(-1), Z(0) using mapping ("z_diagCheck");
weight:  scale 1 
	 | scale Z_OD_OBS_0:Z_OD_OBS_0
	 | scale Z_OD_OBS_1:Z_OD_OBS_1
	 | scale Z_OD_OBS_2:Z_OD_OBS_2
	 | scale Z_OD_OBS_3:Z_OD_OBS_3
	 | scale Z_OD_OBS_4:Z_OD_OBS_4
	 | penalty Z_D_COEFF_OBS_0:Z_D_COEFF_OBS_0 shift Z_TRANSITION_SHIFT
	 | penalty Z_D_COEFF_OBS_1:Z_D_COEFF_OBS_1 shift Z_TRANSITION_SHIFT
	 | penalty Z_D_COEFF_OBS_2:Z_D_COEFF_OBS_2 shift Z_TRANSITION_SHIFT
	 | penalty Z_D_COEFF_OBS_3:Z_D_COEFF_OBS_3 shift Z_TRANSITION_SHIFT
	 | penalty Z_D_COEFF_OBS_4:Z_D_COEFF_OBS_4 shift Z_TRANSITION_SHIFT;
conditionalparents : nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("internal:UnityScore")
		   | nil using mixture("mixture_zzDiag0")
		   | nil using mixture("mixture_zzDiag1")
		   | nil using mixture("mixture_zzDiag2")
		   | nil using mixture("mixture_zzDiag3")
		   | nil using mixture("mixture_zzDiag4");
  }
  
variable : P1_1 {
type : discrete observed P1_1_OBS:P1_1_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("internal:UnityScore"); 
  }  
  
variable : P1_2 {
type : discrete observed P1_2_OBS:P1_2_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("internal:UnityScore"); 
  }   
  
variable : P2_1 {
type : discrete observed P2_1_OBS:P2_1_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("internal:UnityScore"); 
  }  
  
variable : P2_2 {
type : discrete observed P2_2_OBS:P2_2_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("internal:UnityScore"); 
  }  
  
variable : P3_1 {
type : discrete observed P3_1_OBS:P3_1_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("internal:UnityScore"); 
  }  
  
variable : P3_2 {
type : discrete observed P3_2_OBS:P3_2_OBS cardinality P_CARD; 
conditionalparents : nil using DenseCPT("internal:UnityScore"); 
  }        
 
variable : D {
type : discrete observed D_OBS:D_OBS cardinality D_CARD;
conditionalparents : nil using DenseCPT("internal:UnityScore"); 
  }  

variable : A1 {
type : continuous observed A1_OBS:A1_OBS;
switchingparents: Z(0),D(0) using mapping ("dt_Z_D");
conditionalparents : G(0),P1_2(0) using mixture collection("pA1_given_G_P_D0") mapping("dtA_given_G_P") 
                   | G(0),P1_1(0) using mixture collection("pA1_given_G_P_D0") mapping("dtA_given_G_P")
                   | nil using mixture ("mixtureA1_D0_0_noCNAs")
                   | nil using mixture ("mixtureA1_D0_0_noCNAs")
                   | nil using mixture ("mixtureA1_D0_0_noCNAs")
                   | G(0),P1_2(0) using mixture collection("pA1_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P1_1(0) using mixture collection("pA1_given_G_P_D1") mapping("dtA_given_G_P")
                   | nil using mixture ("internal:ZeroScore") 
                   | nil using mixture ("internal:ZeroScore") 
                   | nil using mixture ("internal:ZeroScore");
  }

variable : L1 {
type : continuous observed L1_OBS:L1_OBS;
switchingparents: Z(0) using mapping ("internal:copyParent");
conditionalparents : G(0),P1_2(0) using mixture collection("pL1_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P1_1(0) using mixture collection("pL1_given_G_P") mapping("dtL_given_G_P")
                   | nil using mixture ("mixtureL1_0_noCNAs") 
                   | nil using mixture ("mixtureL1_0_noCNAs") 
                   | nil using mixture ("mixtureL1_0_noCNAs");
  }
  
variable : A2 {
type : continuous observed A2_OBS:A2_OBS;
switchingparents: Z(0),D(0) using mapping ("dt_Z_D");
conditionalparents : G(0),P2_2(0) using mixture collection("pA2_given_G_P_D0") mapping("dtA_given_G_P") 
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D0") mapping("dtA_given_G_P")
                   | nil using mixture ("mixtureA2_D0_0_noCNAs")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P2_2(0) using mixture collection("pA2_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D1") mapping("dtA_given_G_P")
                   | nil using mixture ("internal:ZeroScore")
                   | G(0),P2_1(0) using mixture collection("pA2_given_G_P_D1") mapping("dtA_given_G_P");
  }

variable : L2 {
type : continuous observed L2_OBS:L2_OBS;
switchingparents: Z(0) using mapping ("internal:copyParent");
conditionalparents : G(0),P2_2(0) using mixture collection("pL2_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pL2_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P2_1(0) using mixture collection("pL2_given_G_P") mapping("dtL_given_G_P")
                   | nil using mixture ("mixtureL2_0_noCNAs")
                   | G(0),P2_1(0) using mixture collection("pL2_given_G_P") mapping("dtL_given_G_P");
  }  
  
variable : A3 {
type : continuous observed A3_OBS:A3_OBS;
switchingparents: Z(0),D(0) using mapping ("dt_Z_D");
conditionalparents : G(0),P3_2(0) using mixture collection("pA3_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D0") mapping("dtA_given_G_P")
                   | nil using mixture ("mixtureA3_D0_0_noCNAs") 
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D0") mapping("dtA_given_G_P")
                   | G(0),P3_2(0) using mixture collection("pA3_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D1") mapping("dtA_given_G_P")
                   | nil using mixture ("internal:ZeroScore") 
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D1") mapping("dtA_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pA3_given_G_P_D1") mapping("dtA_given_G_P");
  }

variable : L3 {
type : continuous observed L3_OBS:L3_OBS;
switchingparents: Z(0) using mapping ("internal:copyParent");
conditionalparents : G(0),P3_2(0) using mixture collection("pL3_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pL3_given_G_P") mapping("dtL_given_G_P")
                   | nil using mixture ("mixtureL3_0_noCNAs")
                   | G(0),P3_1(0) using mixture collection("pL3_given_G_P") mapping("dtL_given_G_P")
                   | G(0),P3_1(0) using mixture collection("pL3_given_G_P") mapping("dtL_given_G_P");
  } 
  
}

chunk 1:1;
